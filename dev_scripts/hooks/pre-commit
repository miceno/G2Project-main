#!/bin/sh

BASE_DIR=$(dirname $0)

test -f $BASE_DIR/.hook-config && source $BASE_DIR/.hook-config

PHP_CBF_BIN=dev_vendor/bin/phpcbf
PHP_CBF_CONFIG_START=phpcs.xml
PHP_CBF_CONFIG_END=phpcs-end.xml

PHP_FIX_BIN=dev_vendor/bin/php-cs-fixer
PHP_FIX_CONFIG=.php_cs.dist

PROJECT=$(php -r "echo dirname(dirname(dirname(realpath('$0'))));")
PHP_FILES=$(git diff-index --name-only --cached --diff-filter=ACMRT HEAD -- | egrep '\.php$|\.inc$|\.class$')
FIX_FILES=$(git diff-index --name-only --cached --diff-filter=ACMRT HEAD -- | egrep '\.php$|\.inc$|\.class$|\.css$|\.js$|\.xml$|\.xaml$|\.html$')

# Check if PHP-CS-FIXER is set up correctly
if [ ! -x $PHP_FIX_BIN ]
then
	echo "\n\nPHP-CS-FIXER not Found or not Executable ... Aborting\n"
	exit 1
else
	# Check if PHPCBF is set up correctly
	if [ ! -x $PHP_CBF_BIN ]
	then
   		echo "\n\nPHPCBF not Found or not Executable ... Aborting\n"
		exit 1
	else
		# Lint PHP files if present
		if [ "$PHP_FILES" != "" ]
		then
			echo "\nChecking for PHP syntax errors...\n"

			for PHP_FILE in $PHP_FILES
			do
				FILE="$PROJECT/$PHP_FILE"

				echo "...in: $FILE\n"

				RET=$(php -l -d display_errors=0 $FILE)
				if [ $? != 0 ]
				then
					echo "\n\nPHP Syntax Errors Found ... Aborting\n\n"
					RET=$(git reset HEAD $FILE)
					echo "\n\nPlease Fix Errors and Repeat Commit"
					echo "Remember to Run 'git add $FILE' before Repeating the Commit\n\n"
					exit 1
				fi
			done
			echo "\nLinted PHP Files...No syntax errors found"

		fi

		# Execute PHPCBF & PHP-CS-FIXER
		echo "Apply Coding Style"

		for TARGET_FILE in $FIX_FILES
		do
			FILE="$PROJECT/$TARGET_FILE"

			echo "\n\n\nProcessing $FILE\n"

			# Unstage target file
			RET=$(git reset HEAD $FILE)


			# Prepare misc items in target file for PHPCBF and PHP-CS-FIXER
			# 01. Move end of line comments to previous line
			RET=$(perl -p -i -e 's/^(\s*)([^;]+;)(\s*)(\/\/[^\n]+\n)/\n$1$4\n$1$2\n/' $FILE)
			RET=$(perl -p -i -e 's/^(\s*)([^;]+;)(\s*)(\/\*[^\n]+\*)(\*\/)/\n$1$4$5\n$1$2\n/' $FILE)
			# 02. Move end of class declaration line comments to previous line
			RET=$(perl -p -i -e 's/^(\s*)class([^\/]+)(\/\/[^\n]+\n)/\n$1$3\n$1class$2\n/' $FILE)
			RET=$(perl -p -i -e 's/^(\s*)class([^\/]+)(\/\*[^\n]+\*)(\*\/)([^\n]+\n)/\n$1$3$4\n$1class$2$5\n/' $FILE)
			# 03. Move end of line comments after opening braces to preceeding line
			RET=$(perl -p -i -e 's/^(\s*)([^\{]+\{)(\s*)(\/\/[^\n]+\n)/\n$1$2\n$1$4\n/' $FILE)
			RET=$(perl -p -i -e 's/^(\s*)([^\}]+\})(\s*)(\/\*[^\*]+\*\/)([^\n]+\n)/\n$1$2\n$1$4$5\n/' $FILE)
			# 04. Remove all blank lines
			RET=$(perl -p -i -e 's/^\s*$//' $FILE)
			# 05. Add blank lines before and after single line "global", "static", "return", "break", "exit", "continue" "require" and "include" calls
			RET=$(perl -p -i -e 's/^(\s*)(global|static|return|break|exit|continue|require|include)([^;]*;)(.*)$/\n\n$1$2$3$4\n\n/' $FILE)
			# 06. Add blank line before other "global", "static", "return", "break", "exit", "continue" "require" and "include" calls
			RET=$(perl -p -i -e 's/^(\s*)(global|static|return|break|exit|continue|require|include)([^\n]+\n)/\n\n$1$2$3/' $FILE)
			# 07. Add blank line before "$query", "$ret" and "list" calls
			RET=$(perl -p -i -e 's/^(\s*)(\$query\s+\.?=|\$ret\s*=|list\()/\n\n$1$2/' $FILE)
			# 08. Add blank line after single line "$query", "$ret" and "list" calls
			RET=$(perl -p -i -e 's/^(\s*)(\$query\s+\.?=|\$ret\s+=|list\()([^;]+;)(.*)/$1$2$3$4\n\n/' $FILE)
			# 09. Add blank line after closing braces
			RET=$(perl -p -i -e 's/^(\s*)\}(\s*)$/$1\}$2\n\n/' $FILE)
			# 10. Add blank lines before and after "require" and "include" calls
			RET=$(perl -p -i -e 's/^(\s*)(require|include)([^;]+;)(.*)$/\n\n$1$2$3$4\n\n/' $FILE)
			# 11. Add blank line after closing multiline statements and strings
			RET=$(perl -p -i -e 's/^(\s*)(\)|\x27|");(\s*)$/$1$2;$3\n\n/' $FILE)
			# 12. Add blank line before single line comments
			RET=$(perl -p -i -e 's/^(\s*)(\/\/.+?)/\n\n$1$2/' $FILE)
			# 13.  Add blank line before multi line comments
			RET=$(perl -p -i -e 's/^(\s*)\/\*/\n\n$1\/\*/' $FILE)
			# 14. Add blank line before opening braces
			RET=$(perl -p -i -e 's/^(\s*)([^\{\*]+\{)\n/\n\n$1$2\n/' $FILE)
			RET=$(perl -p -i -e 's/^(\s*)(if|foreach|while)(\s+\()([^\n]+\n)/\n\n$1$2$3$4/' $FILE)
			# 15. Remove blank single line comments
			RET=$(perl -p -i -e 's/^(\s*)(\/\/)(\s*)$//' $FILE)
			# 16. Add blank line before and after single line "$XYZ->" calls
			RET=$(perl -p -i -e 's/^([^=\.\?\:\/\*\(]*\$)([^-=]+->)([^\)=]+\))([^=;]*;)(.*)$/\n\n$1$2$3$4$5\n\n/' $FILE)
			# 17. Add blank line before other "$XYZ->" calls
			RET=$(perl -p -i -e 's/^([^=\.\?\:\/\*\(]*\$)([^-=]+->)([^\)=]+\()([^=\n]*\n)/\n\n$1$2$3$4/' $FILE)
			# 18. Add blank line before and after calls to static mathods
			RET=$(perl -p -i -e 's/^([^=\$\.\?\:\/\*\(]*::)([^;]+;)([^\n]*\n)/\n\n$1$2$3\n\n/' $FILE)
			# 19. Add blank line before switch case statements
			RET=$(perl -p -i -e 's/^(\s*)(case|default)([^:]+:)(.*)$/$1$2$3$4\n\n/' $FILE)
			# 20. Remove blank lines after single line comments
			RET=$(perl -0777 -p -i -e 's/([^\w]+)(\/\/[^\n]+\n)(\s*\n){1,}/$1$2/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\w]+)(\/\/[^\n]+\n)(\s*\n){1,}/$1$2/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\w]+)(\/\/[^\n]+\n)(\s*\n){1,}/$1$2/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\w]+)(\/\/[^\n]+\n)(\s*\n){1,}/$1$2/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\w]+)(\/\/[^\n]+\n)(\s*\n){1,}/$1$2/gms' $FILE)
			# 21. Add blank line after closing braces with single line comments
			RET=$(perl -p -i -e 's/^(\s*)([^\}]+\})(\s*)(\/\/[^\n]+\n)/$1$2 $4\n\n/' $FILE)
			RET=$(perl -p -i -e 's/^(\s*)([^\}]+\})(\s*)(\/\*[^\*]+\*\/)([^\n]+\n)/$1$2 $4$5\n\n/' $FILE)
			# 22. Remove blank lines after multiline comments
			RET=$(perl -0777 -p -i -e 's/(\s*)(\*\/[^\n]*\n)(\s*\n)/$1$2/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*)(\*\/[^\n]*\n)(\s*\n)/$1$2/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*)(\*\/[^\n]*\n)(\s*\n)/$1$2/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*)(\*\/[^\n]*\n)(\s*\n)/$1$2/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*)(\*\/[^\n]*\n)(\s*\n)/$1$2/gms' $FILE)
			# 23. Add blank line between multi and single line comments
			RET=$(perl -0777 -p -i -e 's/(\s*)(\*\/[^\n]*\n)(\s*)(\/\/)/$1$2\n$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*)(\*\/[^\n]*\n)(\s*)(\/\/)/$1$2\n$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*)(\*\/[^\n]*\n)(\s*)(\/\/)/$1$2\n$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*)(\*\/[^\n]*\n)(\s*)(\/\/)/$1$2\n$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*)(\*\/[^\n]*\n)(\s*)(\/\/)/$1$2\n$3$4/gms' $FILE)
			# 24. Add blank line between single and multi line comments
			RET=$(perl -0777 -p -i -e 's/(\s*)(\/\/[^\n]+\n)(\s*)(\/\*[^\n]*\n)/$1$2\n\n$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*)(\/\/[^\n]+\n)(\s*)(\/\*[^\n]*\n)/$1$2\n\n$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*)(\/\/[^\n]+\n)(\s*)(\/\*[^\n]*\n)/$1$2\n\n$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*)(\/\/[^\n]+\n)(\s*)(\/\*[^\n]*\n)/$1$2\n\n$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*)(\/\/[^\n]+\n)(\s*)(\/\*[^\n]*\n)/$1$2\n\n$3$4/gms' $FILE)
			# 25. Remove blank lines after final colons
			RET=$(perl -0777 -p -i -e 's/([^:]+:)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^:]+:)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^:]+:)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^:]+:)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^:]+:)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			# 26. Remove blank lines after final commas
			RET=$(perl -0777 -p -i -e 's/([^,]+,)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^,]+,)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^,]+,)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^,]+,)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^,]+,)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			# 27. Remove blank lines between consecutive calls to static mathods
			RET=$(perl -0777 -p -i -e 's/(\n[^=\$\(\{\.\?\:\/\*]+::)([^;]+;)([^\n]*)(\s*\n\s*){1,}(\n\s*)([^=\$\(\{\.\?\:\/\*]+::)([^;]+;)([^\n]*\n)/$1$2$3$5$6$7$8/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n[^=\$\(\{\.\?\:\/\*]+::)([^;]+;)([^\n]*)(\s*\n\s*){1,}(\n\s*)([^=\$\(\{\.\?\:\/\*]+::)([^;]+;)([^\n]*\n)/$1$2$3$5$6$7$8/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n[^=\$\(\{\.\?\:\/\*]+::)([^;]+;)([^\n]*)(\s*\n\s*){1,}(\n\s*)([^=\$\(\{\.\?\:\/\*]+::)([^;]+;)([^\n]*\n)/$1$2$3$5$6$7$8/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n[^=\$\(\{\.\?\:\/\*]+::)([^;]+;)([^\n]*)(\s*\n\s*){1,}(\n\s*)([^=\$\(\{\.\?\:\/\*]+::)([^;]+;)([^\n]*\n)/$1$2$3$5$6$7$8/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n[^=\$\(\{\.\?\:\/\*]+::)([^;]+;)([^\n]*)(\s*\n\s*){1,}(\n\s*)([^=\$\(\{\.\?\:\/\*]+::)([^;]+;)([^\n]*\n)/$1$2$3$5$6$7$8/gms' $FILE)
			# 28. Remove blank lines between consecutive "$XYZ->" calls
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(\$[^-=]+->)([^=;]+;)(\s*\n\s*){1,}\n(\s*)(\$[^-=]+->)([^=;]+;)/$1$2$3\n$5$6$7/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(\$[^-=]+->)([^=;]+;)(\s*\n\s*){1,}\n(\s*)(\$[^-=]+->)([^=;]+;)/$1$2$3\n$5$6$7/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(\$[^-=]+->)([^=;]+;)(\s*\n\s*){1,}\n(\s*)(\$[^-=]+->)([^=;]+;)/$1$2$3\n$5$6$7/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(\$[^-=]+->)([^=;]+;)(\s*\n\s*){1,}\n(\s*)(\$[^-=]+->)([^=;]+;)/$1$2$3\n$5$6$7/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(\$[^-=]+->)([^=;]+;)(\s*\n\s*){1,}\n(\s*)(\$[^-=]+->)([^=;]+;)/$1$2$3\n$5$6$7\n/gms' $FILE)
			# 29. Remove blank lines between consecutive "list" calls calls
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(list[^;]+;)(\s*\n\s*){1,}(\n\s*)(list[^;]+;)/$1$2$4$5/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(list[^;]+;)(\s*\n\s*){1,}(\n\s*)(list[^;]+;)/$1$2$4$5/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(list[^;]+;)(\s*\n\s*){1,}(\n\s*)(list[^;]+;)/$1$2$4$5/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(list[^;]+;)(\s*\n\s*){1,}(\n\s*)(list[^;]+;)/$1$2$4$5/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(list[^;]+;)(\s*\n\s*){1,}(\n\s*)(list[^;]+;)/$1$2$4$5/gms' $FILE)
			# 30. Combine consecutive "global" and "static" $XYZ calls
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(global|static)([^;]+;)(\s*\n\s*){1,}(\n\s*)(global|static)([^\n]+\n)/$1$2$3$5$6$7/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(global|static)([^;]+;)(\s*\n\s*){1,}(\n\s*)(global|static)([^\n]+\n)/$1$2$3$5$6$7/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(global|static)([^;]+;)(\s*\n\s*){1,}(\n\s*)(global|static)([^\n]+\n)/$1$2$3$5$6$7/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(global|static)([^;]+;)(\s*\n\s*){1,}(\n\s*)(global|static)([^\n]+\n)/$1$2$3$5$6$7/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(global|static)([^;]+;)(\s*\n\s*){1,}(\n\s*)(global|static)([^\n]+\n)/$1$2$3$5$6$7\n/gms' $FILE)
			# 31. Combine consecutive "global" $XYZ calls
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(global)([^;]+)(;)(\n\s*)(global)([^;]+;)([^\n]*\n)/$1$2$3, $7$8/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(global)([^;]+)(;)(\n\s*)(global)([^;]+;)([^\n]*\n)/$1$2$3, $7$8/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(global)([^;]+)(;)(\n\s*)(global)([^;]+;)([^\n]*\n)/$1$2$3, $7$8/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(global)([^;]+)(;)(\n\s*)(global)([^;]+;)([^\n]*\n)/$1$2$3, $7$8/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(global)([^;]+)(;)(\n\s*)(global)([^;]+;)([^\n]*\n)/$1$2$3, $7$8/gms' $FILE)
			# 32. Combine consecutive "static" $XYZ calls
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(static)([^;]+)(;)(\n\s*)(static)([^;]+;)([^\n]*\n)/$1$2$3, $7$8/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(static)([^;]+)(;)(\n\s*)(static)([^;]+;)([^\n]*\n)/$1$2$3, $7$8/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(static)([^;]+)(;)(\n\s*)(static)([^;]+;)([^\n]*\n)/$1$2$3, $7$8/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(static)([^;]+)(;)(\n\s*)(static)([^;]+;)([^\n]*\n)/$1$2$3, $7$8/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(static)([^;]+)(;)(\n\s*)(static)([^;]+;)([^\n]*\n)/$1$2$3, $7$8/gms' $FILE)
			# 33. Separate multiline comment blocks
			RET=$(perl -0777 -p -i -e 's/(\s*)(\*\/)\s*\n*(\s*\/\*)/$1$2\n\n$3/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*)(\*\/)\s*\n*(\s*\/\*)/$1$2\n\n$3/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*)(\*\/)\s*\n*(\s*\/\*)/$1$2\n\n$3/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*)(\*\/)\s*\n*(\s*\/\*)/$1$2\n\n$3/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*)(\*\/)\s*\n*(\s*\/\*)/$1$2\n\n$3/gms' $FILE)
			# 34. Remove blank lines before closing braces
			RET=$(perl -0777 -p -i -e 's/(\s*\n\s*){1,}(\n\s*)\}/$2\}/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*\n\s*){1,}(\n\s*)\}/$2\}/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*\n\s*){1,}(\n\s*)\}/$2\}/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*\n\s*){1,}(\n\s*)\}/$2\}/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*\n\s*){1,}(\n\s*)\}/$2\}/gms' $FILE)
			# 35. Remove blank lines before else statements
			RET=$(perl -0777 -p -i -e 's/(\s*\n\s*){1,}(\n\s*)(\}|\))([^\{]+\{)([^\n]*\n)/$2$3$4$5\n/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*\n\s*){1,}(\n\s*)(\}|\))([^\{]+\{)([^\n]*\n)/$2$3$4$5\n/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*\n\s*){1,}(\n\s*)(\}|\))([^\{]+\{)([^\n]*\n)/$2$3$4$5\n/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*\n\s*){1,}(\n\s*)(\}|\))([^\{]+\{)([^\n]*\n)/$2$3$4$5\n/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*\n\s*){1,}(\n\s*)(\}|\))([^\{]+\{)([^\n]*\n)/$2$3$4$5\n/gms' $FILE)
			# 36. Remove blank lines after opening braces
			RET=$(perl -0777 -p -i -e 's/([^\{]+\{)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\{]+\{)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\{]+\{)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\{]+\{)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\{]+\{)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			# 37. Remove blank lines after opening brackets
			RET=$(perl -0777 -p -i -e 's/([^\(]+\()(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\(]+\()(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\(]+\()(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\(]+\()(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\(]+\()(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			# 38. Remove blank lines after ending full stop
			RET=$(perl -0777 -p -i -e 's/([^\.]+\.)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\.]+\.)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\.]+\.)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\.]+\.)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\.]+\.)(\s*\n\s*){1,}(\n\s*)([^\n]+\n)/$1$3$4/gms' $FILE)
			# 39. Remove blank lines before "if" continuation operators
			RET=$(perl -0777 -p -i -e 's/(\s*\n\s*){1,}(\n\s*)(\&\&|\|\|)/$2$3/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*\n\s*){1,}(\n\s*)(\&\&|\|\|)/$2$3/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*\n\s*){1,}(\n\s*)(\&\&|\|\|)/$2$3/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*\n\s*){1,}(\n\s*)(\&\&|\|\|)/$2$3/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\s*\n\s*){1,}(\n\s*)(\&\&|\|\|)/$2$3/gms' $FILE)
			# 40. Compress multiple blank lines
			RET=$(perl -0777 -p -i -e 's/(\n\s*){2,}(\n\s*)/\n$2/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*){2,}(\n\s*)/\n$2/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*){2,}(\n\s*)/\n$2/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*){2,}(\n\s*)/\n$2/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*){2,}(\n\s*)/\n$2/gms' $FILE)


			# Apply coding style to target file
			RET=$($PHP_CBF_BIN --standard=$PHP_CBF_CONFIG_START $FILE)
			RET=$($PHP_FIX_BIN fix --config "$PHP_FIX_CONFIG" $FILE)
			RET=$($PHP_CBF_BIN --standard=$PHP_CBF_CONFIG_END $FILE)


			# Catch misc items in target file not covered by PHPCBF or PHP-CS-FIXER
			# 01. Standardise Assignment by Reference
			RET=$(perl -i -pe 's/=& \s*/=& /' $FILE)
			# 02. Close empty braces on same line as opening brace
			RET=$(perl -i -0pe 's/\{\s*\n\s*\}([^\w]*)/{}$1/gms' $FILE)
			# 03. Remove blank lines between consecutive "require" and "include" calls
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(require|include)([^;]+;)(\s*\n\s*){1,}(\n\s*)(require|include)([^\n]+\n)/$1$2$3$5$6$7/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(require|include)([^;]+;)(\s*\n\s*){1,}(\n\s*)(require|include)([^\n]+\n)/$1$2$3$5$6$7/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(require|include)([^;]+;)(\s*\n\s*){1,}(\n\s*)(require|include)([^\n]+\n)/$1$2$3$5$6$7/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(require|include)([^;]+;)(\s*\n\s*){1,}(\n\s*)(require|include)([^\n]+\n)/$1$2$3$5$6$7/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/(\n\s*)(require|include)([^;]+;)(\s*\n\s*){1,}(\n\s*)(require|include)([^\n]+\n)/$1$2$3$5$6$7/gms' $FILE)
			# 04. Fix foreach
			RET=$(perl -0777 -p -i -e 's/([^\)]+\))(\s*\n\s*){1,}(as\s)/$1 $3/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\)]+\))(\s*\n\s*){1,}(as\s)/$1 $3/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\)]+\))(\s*\n\s*){1,}(as\s)/$1 $3/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\)]+\))(\s*\n\s*){1,}(as\s)/$1 $3/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\)]+\))(\s*\n\s*){1,}(as\s)/$1 $3/gms' $FILE)
			# 05 Fix token bug
			RET=$(perl -i -pe 's/\^PHPCS_CSS_T_OPEN_TAG\^/<\?php/' $FILE)
			RET=$(perl -i -pe 's/\^PHPCS_CSS_T_CLOSE_TAG\^/\?>/' $FILE)
			# 06 Move single comma after opening bracket to previous line
			RET=$(perl -0777 -p -i -e 's/([^\(]+\()(\s*\n\s*)(\x27|")(\s*\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\(]+\()(\s*\n\s*)(\x27|")(\s*\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\(]+\()(\s*\n\s*)(\x27|")(\s*\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\(]+\()(\s*\n\s*)(\x27|")(\s*\n)/$1$3$4/gms' $FILE)
			RET=$(perl -0777 -p -i -e 's/([^\(]+\()(\s*\n\s*)(\x27|")(\s*\n)/$1$3$4/gms' $FILE)


			# Ensure syntax errors have not been introduced
			RET=$(php -l -d display_errors=0 $FILE)
			if [ $? != 0 ]
			then
				echo "\n\n$FILE"
				echo "PHP Errors introduced by pre-commit script ... Aborting"
				echo "Please raise an issue on https://github.com/dakanji/G2Project/issues\n\n"
				exit 1
			fi


			# Stage target file
			git add $FILE
		done

		# Check for staged changes and abort if none
		RET=$(git diff --cached)

		if [ "$RET" == "" ]
		then
			echo "\nNOTE: Commit Emptied After Style Fix ... Aborting\n"
			exit 1
		fi

		# Completed
		echo "\n\nCoding Style Fixed\n\n"
	fi
fi
